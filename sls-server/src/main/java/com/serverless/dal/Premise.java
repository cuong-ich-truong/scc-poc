package com.serverless.dal;

import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapper;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapperConfig;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBRangeKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBScanExpression;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedKey;
import java.io.IOException;
import java.util.List;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

@DynamoDBTable(tableName = "java-premise")
public class Premise {

    // get the table name from env. var. set in serverless.yml
    private static final String TABLE_NAME = System.getenv("PREMISE_TABLE_NAME");

    private static DynamoDBAdapter db_adapter;
    private final AmazonDynamoDB client;
    private final DynamoDBMapper mapper;

    private Logger logger = LogManager.getLogger(this.getClass());

    private String id;
    private String name;

    @DynamoDBHashKey(attributeName = "id")
    @DynamoDBAutoGeneratedKey
    public String getId() {
        return this.id;
    }
    public void setId(String id) {
        this.id = id;
    }

    @DynamoDBRangeKey(attributeName = "name")
    public String getName() {
        return this.name;
    }
    public void setName(String name) {
        this.name = name;
    }

    public Premise() {
        // build the mapper config
        DynamoDBMapperConfig mapperConfig = DynamoDBMapperConfig.builder()
            .withTableNameOverride(new DynamoDBMapperConfig.TableNameOverride(TABLE_NAME))
            .build();
        // get the db adapter
        Premise.db_adapter = DynamoDBAdapter.getInstance();
        this.client = Premise.db_adapter.getDbClient();
        // create the mapper with config
        this.mapper = Premise.db_adapter.createDbMapper(mapperConfig);
    }

    public String toString() {
        return String.format("Premise [id=%s, name=%s]", this.id, this.name);
    }

    // methods
    public Boolean ifTableExists() {
        return this.client.describeTable(TABLE_NAME).getTable().getTableStatus().equals("ACTIVE");
    }

    public List<Premise> list() throws IOException {
      DynamoDBScanExpression scanExp = new DynamoDBScanExpression();
      List<Premise> results = this.mapper.scan(Premise.class, scanExp);
      for (Premise p : results) {
        logger.info("Premises - list(): " + p.toString());
      }
      return results;
    }
}