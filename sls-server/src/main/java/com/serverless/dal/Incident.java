package com.serverless.dal;

import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.datamodeling.*;
import com.serverless.dto.UpdateIncidentRequest;
import org.apache.commons.lang3.BooleanUtils;
import org.apache.commons.lang3.StringUtils;
import com.amazonaws.services.dynamodbv2.model.AttributeValue;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.IOException;
import java.util.*;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.stream.Collectors;

@DynamoDBTable(tableName = "INCIDENT_TABLE_NAME")
public class Incident {

    // get the table name from env. var. set in serverless.yml
    private static final String TABLE_NAME = System.getenv("INCIDENT_TABLE_NAME");

    private static DynamoDBAdapter db_adapter;
    private final AmazonDynamoDB client;
    private final DynamoDBMapper mapper;

    private final Logger logger = LogManager.getLogger(this.getClass());

    private String id;
    private String name;
    private Boolean ignored;
    private String guardId;
    private String cameraId;
    private String instruction;
    private String dateCreated;

    private List<Note> notes = new ArrayList<>();

    @DynamoDBHashKey(attributeName = "id")
    @DynamoDBAutoGeneratedKey
    public String getId() {
        return this.id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getName() {
        return this.name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Boolean isIgnored() {
        if (this.ignored == null) {
            return false;
        }
        
        return this.ignored;
    }

    public void setIgnored(Boolean ignored) {
        this.ignored = ignored;
    }

    public String getGuardId() {
        return this.guardId;
    }

    @DynamoDBIgnore
    public Boolean isAssignedToGuard() {
        return this.guardId != null && !this.guardId.isEmpty();
    }

    public void setGuardId(String guardId) {
        this.guardId = guardId;
    }

    public String getCameraId() {
        return this.cameraId;
    }

    public void setCameraId(String cameraId) {
        this.cameraId = cameraId;
    }

    public List<Note> getNotes() {
        return notes;
    }

    public void setNotes(List<Note> notes) {
        this.notes = notes;
    }

    public String getDateCreated() {
        return this.dateCreated;
    }

    public String getInstruction() {
        return instruction;
    }

    public void setInstruction(String instruction) {
        this.instruction = instruction;
    }

    public void setDateCreated(String dateCreated) {
        this.dateCreated = dateCreated;
    }

    public Incident() {
        // build the mapper config
        DynamoDBMapperConfig mapperConfig = DynamoDBMapperConfig.builder()
                .withTableNameOverride(new DynamoDBMapperConfig.TableNameOverride(TABLE_NAME))
                .build();
        // get the db adapter
        Incident.db_adapter = DynamoDBAdapter.getInstance();
        this.client = Incident.db_adapter.getDbClient();
        // create the mapper with config
        this.mapper = Incident.db_adapter.createDbMapper(mapperConfig);
    }

    public String toString() {
        return String.format("Incident [id=%s, name=%s, ignored=%s, guardId=%s, cameraId=%s, dateCreated=%s]", this.id, this.name, this.ignored, this.guardId, this.cameraId, this.dateCreated);
    }

    // methods
    public Boolean ifTableExists() {
        return this.client.describeTable(TABLE_NAME).getTable().getTableStatus().equals("ACTIVE");
    }

    public List<Incident> list() throws IOException {
        DynamoDBScanExpression scanExp = new DynamoDBScanExpression();
        List<Incident> incidents = this.mapper.scan(Incident.class, scanExp);
        incidents.forEach(incident -> incident.setNotes(new Note().getNoteByIncidentId(incident.getId())));
        return incidents;
    }

    public Incident get(String id) throws IOException {
        Incident incident = mapper.load(Incident.class, id);
        if (incident == null)
            return null;
        incident.setNotes(new Note().getNoteByIncidentId(incident.getId()));
        return incident;
    }

    public Incident create(Incident incident) throws IOException {
        Date now = new Date();
        incident.setDateCreated(now.toString());
        logger.info("Incidents - create(): " + incident.toString());
        this.mapper.save(incident);
        return incident;
    }

    public Incident update(String id, UpdateIncidentRequest updateIncidentRequest) {
        Incident incident = this.mapper.load(Incident.class, id);
        logger.info("Incident - load(): record - " + incident.toString());

        if (StringUtils.isNotBlank(updateIncidentRequest.guardId) && StringUtils.isBlank(incident.getGuardId())) {
            incident.setGuardId(updateIncidentRequest.guardId);
        }
        if (BooleanUtils.isTrue(updateIncidentRequest.ignore)) {
            incident.setIgnored(true);
        }
        save(incident);

        return incident;
    }

    public void save(Incident record) {
        this.mapper.save(record);
        logger.info("Incident created/updated");
    }

    public List<Incident> getIncidentsByGuardId(String guardId) throws IOException {
        List<Incident> incidents = this.list();

        List<Incident> filteredIncidents = incidents.stream()
            .filter(incident -> guardId.equals(incident.getGuardId()))
            .collect(Collectors.toList());

        return filteredIncidents;
    }
    public List<Incident> getIncidentsExcludedIds(String[] excludedIncidentIds) {
        if (excludedIncidentIds.length == 0) {
            return new ArrayList<>();
        }

        Map<String, AttributeValue> attributeValues = new HashMap<>();
        for (int i = 1; i <= excludedIncidentIds.length; i++) {
            attributeValues.put(String.format(":id%s", i), new AttributeValue().withS(excludedIncidentIds[i-1]));
        }

        DynamoDBScanExpression dynamoDBScanExpression = new DynamoDBScanExpression()
                .withFilterExpression(String.format("NOT(id IN (%s))", StringUtils.join(attributeValues.keySet(), ", ")))
                .withExpressionAttributeValues(attributeValues);

        return mapper.scan(Incident.class, dynamoDBScanExpression,
                new DynamoDBMapperConfig(DynamoDBMapperConfig.ConsistentReads.CONSISTENT));
    }
}
