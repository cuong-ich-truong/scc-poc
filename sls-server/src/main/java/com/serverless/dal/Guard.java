package com.serverless.dal;

import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.datamodeling.*;
import com.amazonaws.services.dynamodbv2.model.AttributeValue;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;

@DynamoDBTable(tableName = "PLACEHOLDER_GUARD_TABLE_NAME")
public class Guard {

    // get the table name from env. var. set in serverless.yml
    private static final String GUARD_TABLE_NAME = System.getenv("GUARD_TABLE_NAME");

    private static DynamoDBAdapter db_adapter;
    private final AmazonDynamoDB client;
    private final DynamoDBMapper mapper;

    private final Logger logger = LogManager.getLogger(this.getClass());

    private String id;
    private String username;
    private String firstname;

    @DynamoDBHashKey(attributeName = "id")
    @DynamoDBAutoGeneratedKey
    public String getId() {
        return this.id;
    }

    public void setId(String id) {
        this.id = id;
    }

    @DynamoDBRangeKey(attributeName = "username")
    public String getUsername() {
        return this.username;
    }

    public void setUsername(String username) {
        this.username = username;
    }


    @DynamoDBRangeKey(attributeName = "firstname")
    public String getFirstname() {
        return this.firstname;
    }

    public void setFirstname(String firstname) {
        this.firstname = firstname;
    }

    public Guard() {
        // build the mapper config
        DynamoDBMapperConfig mapperConfig = DynamoDBMapperConfig.builder()
                .withTableNameOverride(new DynamoDBMapperConfig.TableNameOverride(GUARD_TABLE_NAME))
                .build();
        // get the db adapter
        Guard.db_adapter = DynamoDBAdapter.getInstance();
        this.client = Guard.db_adapter.getDbClient();
        // create the mapper with config
        this.mapper = Guard.db_adapter.createDbMapper(mapperConfig);
    }

    public String toString() {
        return String.format("Guard [id=%s, username=%s, firstname=%s]", this.id, this.username, this.firstname);
    }

    // methods
    public List<Guard> list() throws IOException {
        DynamoDBScanExpression scanExp = new DynamoDBScanExpression();
        List<Guard> results = this.mapper.scan(Guard.class, scanExp);
        for (Guard p : results) {
            logger.info("Guard - list(): " + p.toString());
        }
        return results;
    }

    public Guard get(String id) throws IOException {
        Guard record = null;

        HashMap<String, AttributeValue> av = new HashMap<String, AttributeValue>();
        av.put(":v1", new AttributeValue().withS(id));

        DynamoDBQueryExpression<Guard> queryExp = new DynamoDBQueryExpression<Guard>()
                .withKeyConditionExpression("id = :v1")
                .withExpressionAttributeValues(av);

        PaginatedQueryList<Guard> result = this.mapper.query(Guard.class, queryExp);
        if (result.size() > 0) {
            record = result.get(0);
            logger.info("Guard - get(): record - " + record.toString());
        } else {
            logger.info("Guard - get(): record - Not Found.");
        }
        return record;
    }

}