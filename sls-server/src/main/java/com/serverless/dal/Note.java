package com.serverless.dal;

import com.amazonaws.HttpMethod;
import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapper;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapperConfig;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBScanExpression;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable;
import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.AmazonS3ClientBuilder;
import com.amazonaws.services.s3.model.GeneratePresignedUrlRequest;
import com.serverless.common.FileType;
import com.serverless.dto.CreateNoteRequestBody;
import com.serverless.exception.EntityNotFoundException;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.IOException;
import java.net.URL;
import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;


@DynamoDBTable(tableName = "NOTE_TABLE_NAME")
public class Note {

    private Logger logger = LogManager.getLogger(this.getClass());

    // get the table name from env. var. set in serverless.yml
    private static final String TABLE_NAME = System.getenv("NOTE_TABLE_NAME");
    private static final String S3_BUCKET_NAME = System.getenv("S3_BUCKET_NAME");
    private static final long EXPIRATION_TIME_MILLIS_1_HOUR = 1000 * 60 * 60;
    private AmazonS3 s3Client;
    private static DynamoDBAdapter db_adapter;
    private final AmazonDynamoDB client;
    protected DynamoDBMapper mapper;
    private String id;
    private String description;
    private URL video;
    private URL picture;
    private String incidentId;

    @DynamoDBHashKey(attributeName = "id")
    @DynamoDBAutoGeneratedKey
    public String getId() {
        return this.id;
    }
    public void setId(String id) {
        this.id = id;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public String getIncidentId() {
        return incidentId;
    }

    public void setIncidentId(String incidentId) {
        this.incidentId = incidentId;
    }

    public URL getVideo() {
        return video;
    }

    public void setVideo(URL video) {
        this.video = video;
    }

    public URL getPicture() {
        return picture;
    }

    public void setPicture(URL picture) {
        this.picture = picture;
    }

    public Note() {
        // build the mapper config
        DynamoDBMapperConfig mapperConfig = DynamoDBMapperConfig.builder()
            .withTableNameOverride(new DynamoDBMapperConfig.TableNameOverride(TABLE_NAME))
            .build();
        // get the db adapter
        Note.db_adapter = DynamoDBAdapter.getInstance();
        this.client = Note.db_adapter.getDbClient();
        // create the mapper with config
        this.mapper = Note.db_adapter.createDbMapper(mapperConfig);
        this.s3Client = AmazonS3ClientBuilder.defaultClient();
    }

    public String toString() {
        return String.format("Note [id=%s, description=%s, videoURL=%s, pictureURL=%s]", this.id, this.description, this.video, this.picture);
    }

    // methods
    public Boolean ifTableExists() {
        return this.client.describeTable(TABLE_NAME).getTable().getTableStatus().equals("ACTIVE");
    }

    public List<Note> list() {
        DynamoDBScanExpression scanExp = new DynamoDBScanExpression();
        List<Note> results = this.mapper.scan(Note.class, scanExp);
        results.forEach(note -> logger.info("Notes - list(): " + note.toString()));
        return results;
    }

    public List<Note> listNotesByIncidentId(String incidentId) throws IOException {
        List<Note> notes = this.list();
        return notes.stream().filter(note -> incidentId.equals(note.getIncidentId())).collect(Collectors.toList());
    }

    public Note getNotetById(String id) throws EntityNotFoundException {
        Note note = mapper.load(Note.class, id);

        if (note == null) {
            throw new EntityNotFoundException("Note with id " + id + " not found.");
        }

        return note;
    }

    public URL putPresignedURL(String incidentId, String noteId, FileType fileType) {
        Date expiration = new Date();

        String objectKey = incidentId + noteId + fileType;

        long expTimeMillis = expiration.getTime();
        expTimeMillis += EXPIRATION_TIME_MILLIS_1_HOUR;
        expiration.setTime(expTimeMillis);

        // Generate the pre-signed URL.
        GeneratePresignedUrlRequest generatePresignedUrlRequest =
            new GeneratePresignedUrlRequest(S3_BUCKET_NAME, objectKey)
                .withMethod(HttpMethod.PUT)
                .withExpiration(expiration);
        return s3Client.generatePresignedUrl(generatePresignedUrlRequest);
    }

    public URL getPresignedURL(String incidentId, String noteId, FileType fileType) {
        Date expiration = new Date();

        String objectKey = incidentId + noteId + fileType;

        long expTimeMillis = expiration.getTime();
        expTimeMillis += EXPIRATION_TIME_MILLIS_1_HOUR;
        expiration.setTime(expTimeMillis);

        // Generate the pre-signed URL.
        GeneratePresignedUrlRequest generatePresignedUrlRequest =
            new GeneratePresignedUrlRequest(S3_BUCKET_NAME, objectKey)
                .withMethod(HttpMethod.GET)
                .withExpiration(expiration);
        return s3Client.generatePresignedUrl(generatePresignedUrlRequest);
    }

    public URL getS3URL(String incidentId, String noteId, FileType fileType) {
        String objectKey = incidentId + noteId + fileType;

        if (s3Client.doesObjectExist(S3_BUCKET_NAME, objectKey)) {
            return getPresignedURL(incidentId, noteId, fileType);
        } else {
            return null;
        }
    }

    public List<Note> getNoteByIncidentId(String incidentId) {
        List<Note> notes = this.list().stream().filter(note -> incidentId.equals(note.getIncidentId())).collect(Collectors.toList());

        notes.forEach(note -> {
            note.setPicture(getS3URL(incidentId, note.getId(), FileType.PICTURE));
            note.setVideo(getS3URL(incidentId, note.getId(), FileType.VIDEO));
        });

        return notes;
    }

    public Note create(String incidentId, CreateNoteRequestBody createNoteRequestBody) throws IOException {
        Note newNote = new Note();
        newNote.setIncidentId(incidentId);
        newNote.setDescription(createNoteRequestBody.getDescription());
        this.mapper.save(newNote);
        return newNote;
    }

}