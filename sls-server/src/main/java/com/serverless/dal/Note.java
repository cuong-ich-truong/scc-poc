package com.serverless.dal;

import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapper;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapperConfig;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBRangeKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBScanExpression;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable;
import com.serverless.exception.EntityNotFoundException;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.IOException;
import java.util.List;

@DynamoDBTable(tableName = "NOTE_TABLE_NAME")
public class Note {

    // get the table name from env. var. set in serverless.yml
    private static final String TABLE_NAME = System.getenv("NOTE_TABLE_NAME");

    private static DynamoDBAdapter db_adapter;
    private final AmazonDynamoDB client;
    protected DynamoDBMapper mapper;

    private Logger logger = LogManager.getLogger(this.getClass());

    private String id;
    private String name;

    @DynamoDBHashKey(attributeName = "id")
    @DynamoDBAutoGeneratedKey
    public String getId() {
        return this.id;
    }
    public void setId(String id) {
        this.id = id;
    }

    @DynamoDBRangeKey(attributeName = "name")
    public String getName() {
        return this.name;
    }
    public void setName(String name) {
        this.name = name;
    }

    public Note() {
        // build the mapper config
        DynamoDBMapperConfig mapperConfig = DynamoDBMapperConfig.builder()
            .withTableNameOverride(new DynamoDBMapperConfig.TableNameOverride(TABLE_NAME))
            .build();
        // get the db adapter
        Note.db_adapter = DynamoDBAdapter.getInstance();
        this.client = Note.db_adapter.getDbClient();
        // create the mapper with config
        this.mapper = Note.db_adapter.createDbMapper(mapperConfig);
    }

    public String toString() {
        return String.format("Note [id=%s, name=%s]", this.id, this.name);
    }

    // methods
    public Boolean ifTableExists() {
        return this.client.describeTable(TABLE_NAME).getTable().getTableStatus().equals("ACTIVE");
    }

    public List<Note> list() throws IOException {
        DynamoDBScanExpression scanExp = new DynamoDBScanExpression();
        List<Note> results = this.mapper.scan(Note.class, scanExp);
        results.forEach(note -> logger.info("Notes - list(): " + note.toString()));
        return results;
    }

    public Note getNotetById(String id) throws EntityNotFoundException {
        Note note = mapper.load(Note.class, id);

        if (note == null) {
            throw new EntityNotFoundException("Note with id " + id + " not found.");
        }

        return note;
    }

    public Note create(Note note) throws IOException {
        logger.info("Incidents - create(): " + note.toString());
        this.mapper.save(note);
        return note;
    }
}
